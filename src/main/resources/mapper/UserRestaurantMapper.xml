<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hotel.core.mapper.UserRestaurantMapper">
    <resultMap id="BaseResultMap" type="com.hotel.core.entity.UserRestaurant">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="restaurant_id" jdbcType="INTEGER" property="restaurantId" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="order_number" jdbcType="VARCHAR" property="orderNumber" />
        <result column="food_name" jdbcType="VARCHAR" property="foodName" />
        <result column="food_unit_price" jdbcType="VARCHAR" property="foodUnitPrice" />
        <result column="food_num" jdbcType="INTEGER" property="foodNum" />
        <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
        <result column="order_overdue_states" jdbcType="INTEGER" property="orderOverdueStates" />
        <result column="order_states" jdbcType="INTEGER" property="orderStates" />
        <result column="test1" jdbcType="VARCHAR" property="test1" />
        <result column="test2" jdbcType="VARCHAR" property="test2" />
        <result column="test3" jdbcType="VARCHAR" property="test3" />
    </resultMap>
    <sql id="Base_Column_List">
    id, user_id, restaurant_id, username, order_number, food_name, food_unit_price, food_num, order_time,
    order_overdue_states, order_states, test1, test2, test3
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_restaurant
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_restaurant
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.hotel.core.entity.UserRestaurant">
    insert into user_restaurant (id, user_id, restaurant_id,
      username, order_number, food_name,
      food_unit_price, food_num, order_time,
      order_overdue_states, order_states, test1,
      test2, test3)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{restaurantId,jdbcType=INTEGER},
      #{username,jdbcType=VARCHAR}, #{orderNumber,jdbcType=VARCHAR}, #{foodName,jdbcType=VARCHAR},
      #{foodUnitPrice,jdbcType=VARCHAR}, #{foodNum,jdbcType=INTEGER}, #{orderTime,jdbcType=TIMESTAMP},
       #{orderOverdueStates,jdbcType=INTEGER}, #{orderStates,jdbcType=INTEGER},
      #{test1,jdbcType=VARCHAR}, #{test2,jdbcType=VARCHAR}, #{test3,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.hotel.core.entity.UserRestaurant" useGeneratedKeys="true" keyProperty="id">
        insert into user_restaurant
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="restaurantId != null">
                restaurant_id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="orderNumber != null">
                order_number,
            </if>
            <if test="foodName != null">
                food_name,
            </if>
            <if test="foodUnitPrice != null">
                food_unit_price,
            </if>
            <if test="foodNum != null">
                food_num,
            </if>
            <if test="orderTime != null">
                order_time,
            </if>
            <if test="orderOverdueStates != null">
                order_overdue_states,
            </if>
            <if test="orderStates != null">
                order_states,
            </if>
            <if test="test1 != null">
                test1,
            </if>
            <if test="test2 != null">
                test2,
            </if>
            <if test="test3 != null">
                test3,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="restaurantId != null">
                #{restaurantId,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="orderNumber != null">
                #{orderNumber,jdbcType=VARCHAR},
            </if>
            <if test="foodName != null">
                #{foodName,jdbcType=VARCHAR},
            </if>
            <if test="foodUnitPrice != null">
                #{foodUnitPrice,jdbcType=VARCHAR},
            </if>
            <if test="foodNum != null">
                #{foodNum,jdbcType=INTEGER},
            </if>
            <if test="orderTime != null">
                #{orderTime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderOverdueStates != null">
                #{orderOverdueStates,jdbcType=INTEGER},
            </if>
            <if test="orderStates != null">
                #{orderStates,jdbcType=INTEGER},
            </if>
            <if test="test1 != null">
                #{test1,jdbcType=VARCHAR},
            </if>
            <if test="test2 != null">
                #{test2,jdbcType=VARCHAR},
            </if>
            <if test="test3 != null">
                #{test3,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.hotel.core.entity.UserRestaurant">
        update user_restaurant
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="restaurantId != null">
                restaurant_id = #{restaurantId,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="orderNumber != null">
                order_number = #{orderNumber,jdbcType=VARCHAR},
            </if>
            <if test="foodName != null">
                food_name = #{foodName,jdbcType=VARCHAR},
            </if>
            <if test="foodUnitPrice != null">
                food_unit_price = #{foodUnitPrice,jdbcType=VARCHAR},
            </if>
            <if test="foodNUm != null">
                food_num = #{foodNUm,jdbcType=INTEGER},
            </if>
            <if test="orderTime != null">
                order_time = #{orderTime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderOverdueStates != null">
                order_overdue_states = #{orderOverdueStates,jdbcType=INTEGER},
            </if>
            <if test="orderStates != null">
                order_states = #{orderStates,jdbcType=INTEGER},
            </if>
            <if test="test1 != null">
                test1 = #{test1,jdbcType=VARCHAR},
            </if>
            <if test="test2 != null">
                test2 = #{test2,jdbcType=VARCHAR},
            </if>
            <if test="test3 != null">
                test3 = #{test3,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hotel.core.entity.UserRestaurant">
    update user_restaurant
    set user_id = #{userId,jdbcType=INTEGER},
      restaurant_id = #{restaurantId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      order_number = #{orderNumber,jdbcType=VARCHAR},
      food_name = #{foodName,jdbcType=VARCHAR},
      food_unit_price = #{foodUnitPrice,jdbcType=VARCHAR},
      food_num = #{foodNum,jdbcType=INTEGER},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      order_overdue_states = #{orderOverdueStates,jdbcType=INTEGER},
      order_states = #{orderStates,jdbcType=INTEGER},
      test1 = #{test1,jdbcType=VARCHAR},
      test2 = #{test2,jdbcType=VARCHAR},
      test3 = #{test3,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="selectUserRestaurantListByLimit" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
    </select>
    <select id="selectCounts" resultType="int">
    SELECT count(*)
    FROM user_restaurant
  </select>
  <update id="cancel" parameterType="com.hotel.core.entity.UserRestaurant">
        UPDATE user_restaurant
        <set>
            <if test="orderOverdueStates != null and orderOverdueStates != ''">
                order_overdue_states = #{orderOverdueStates,jdbcType=INTEGER}
            </if>
        </set>
        WHERE id = #{id,jdbcType=INTEGER}
  </update>


    <select id="searchUserRestaurant" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        <where>
            <if test="orderNumber != null and orderNumber != ''">
                AND order_number LIKE "%"#{orderNumber,jdbcType=VARCHAR}"%"
            </if>
            <if test="username != null and username != ''">
                AND username LIKE "%"#{username,jdbcType=VARCHAR}"%"
            </if>
        </where>
    </select>
    <select id="selectPaidUserRestaurant" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        <where>
            <if test="orderStates != null and orderStates != ''">
                order_states = #{orderStates,jdbcType=INTEGER}
            </if>
        </where>
        LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
    </select>
    <select id="selectUnPaidUserRestaurant" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        <where>
            <if test="orderStates != null and orderStates != ''">
                order_states = #{orderStates,jdbcType=INTEGER}
            </if>
        </where>
        LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
    </select>
    <select id="selectUserRestaurantListByOrderTimeSortDesc" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        ORDER BY order_time DESC
        LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
    </select>
    <select id="selectUserRestaurantListByOrderTimeSortAsc" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        ORDER BY order_time ASC
        LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
    </select>
    <select id="selectUserRestaurantListByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        WHERE user_id = #{userId,jdbcType=INTEGER}
    </select>
    <select id="selectUserRestaurantListByUserIdAndTime" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
        ORDER BY order_time ASC
    </select>
    <select id="selectUserRestaurantListByTime" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM user_restaurant
        WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
        ORDER BY order_time ASC
    </select>
    <select id="selectUserPriceByDay" resultType="map">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m-%d') AS order_time,SUM(food_unit_price*food_num) AS price
    FROM user_restaurant
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectUserPriceByMonth" resultType="map">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m') AS order_time,SUM(food_unit_price*food_num) AS price
    FROM user_restaurant
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectUserPriceByYear" resultType="map">
    SELECT
    DATE_FORMAT(order_time,'%Y') AS order_time,SUM(food_unit_price*food_num) AS price
    FROM user_restaurant
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectCountsByDay" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m-%d') AS order_time,COUNT(id) AS counts
    FROM user_restaurant
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectPriceByDay" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m-%d') AS order_time,SUM(food_unit_price*food_num) AS price
    FROM user_restaurant
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectCountsByMonth" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m') AS order_time,COUNT(id) AS counts
    FROM user_restaurant
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY MONTH(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectPriceByMonth" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m') AS order_time,SUM(food_unit_price*food_num) AS price
    FROM user_restaurant
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY MONTH(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectCountsByYear" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y') AS order_time,COUNT(id) AS counts
    FROM user_restaurant
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY YEAR(order_time)
    ORDER BY order_time ASC
  </select>
    <select id="selectPriceByYear" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y') AS order_time,SUM(food_unit_price*food_num) AS price
    FROM user_restaurant
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY YEAR(order_time)
    ORDER BY order_time ASC
  </select>
    <delete id="deleteBatch" parameterType="java.util.List">
        DELETE FROM user_restaurant
        WHERE id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <select id="selectAll" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_restaurant
    </select>
</mapper>