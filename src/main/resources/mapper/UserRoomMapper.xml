<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hotel.core.mapper.UserRoomMapper">
  <resultMap id="BaseResultMap" type="com.hotel.core.entity.UserRoom">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="room_id" jdbcType="INTEGER" property="roomId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="order_number" jdbcType="VARCHAR" property="orderNumber" />
    <result column="room_number" jdbcType="INTEGER" property="roomNumber" />
    <result column="room_type" jdbcType="VARCHAR" property="roomType" />
    <result column="room_price" jdbcType="VARCHAR" property="roomPrice" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="leave_time" jdbcType="TIMESTAMP" property="leaveTime" />
    <result column="order_overdue_states" jdbcType="INTEGER" property="orderOverdueStates" />
    <result column="order_states" jdbcType="INTEGER" property="orderStates" />
    <result column="test1" jdbcType="VARCHAR" property="test1" />
    <result column="test2" jdbcType="VARCHAR" property="test2" />
    <result column="test3" jdbcType="VARCHAR" property="test3" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, room_id, username, order_number, room_number, room_type, room_price, 
    order_time, leave_time, order_overdue_states, order_states, test1, test2, test3
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_room
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_room
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hotel.core.entity.UserRoom">
    insert into user_room (id, user_id, room_id, 
      username, order_number, room_number, 
      room_type, room_price, order_time, 
      leave_time, order_overdue_states, order_states, 
      test1, test2, test3
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roomId,jdbcType=INTEGER}, 
      #{username,jdbcType=VARCHAR}, #{orderNumber,jdbcType=VARCHAR}, #{roomNumber,jdbcType=INTEGER},
      #{roomType,jdbcType=VARCHAR}, #{roomPrice,jdbcType=VARCHAR}, #{orderTime,jdbcType=TIMESTAMP}, 
      #{leaveTime,jdbcType=TIMESTAMP}, #{orderOverdueStates,jdbcType=INTEGER}, #{orderStates,jdbcType=INTEGER}, 
      #{test1,jdbcType=VARCHAR}, #{test2,jdbcType=VARCHAR}, #{test3,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hotel.core.entity.UserRoom" useGeneratedKeys="true" keyProperty="id">
    insert into user_room
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="roomId != null">
        room_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="orderNumber != null">
        order_number,
      </if>
      <if test="roomNumber != null">
        room_number,
      </if>
      <if test="roomType != null">
        room_type,
      </if>
      <if test="roomPrice != null">
        room_price,
      </if>
      <if test="orderTime != null">
        order_time,
      </if>
      <if test="leaveTime != null">
        leave_time,
      </if>
      <if test="orderOverdueStates != null">
        order_overdue_states,
      </if>
      <if test="orderStates != null">
        order_states,
      </if>
      <if test="test1 != null">
        test1,
      </if>
      <if test="test2 != null">
        test2,
      </if>
      <if test="test3 != null">
        test3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="orderNumber != null">
        #{orderNumber,jdbcType=VARCHAR},
      </if>
      <if test="roomNumber != null">
        #{roomNumber,jdbcType=INTEGER},
      </if>
      <if test="roomType != null">
        #{roomType,jdbcType=VARCHAR},
      </if>
      <if test="roomPrice != null">
        #{roomPrice,jdbcType=VARCHAR},
      </if>
      <if test="orderTime != null">
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="leaveTime != null">
        #{leaveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderOverdueStates != null">
        #{orderOverdueStates,jdbcType=INTEGER},
      </if>
      <if test="orderStates != null">
        #{orderStates,jdbcType=INTEGER},
      </if>
      <if test="test1 != null">
        #{test1,jdbcType=VARCHAR},
      </if>
      <if test="test2 != null">
        #{test2,jdbcType=VARCHAR},
      </if>
      <if test="test3 != null">
        #{test3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hotel.core.entity.UserRoom">
    update user_room
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roomId != null">
        room_id = #{roomId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="orderNumber != null">
        order_number = #{orderNumber,jdbcType=VARCHAR},
      </if>
      <if test="roomNumber != null">
        room_number = #{roomNumber,jdbcType=INTEGER},
      </if>
      <if test="roomType != null">
        room_type = #{roomType,jdbcType=VARCHAR},
      </if>
      <if test="roomPrice != null">
        room_price = #{roomPrice,jdbcType=VARCHAR},
      </if>
      <if test="orderTime != null">
        order_time = #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="leaveTime != null">
        leave_time = #{leaveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderOverdueStates != null">
        order_overdue_states = #{orderOverdueStates,jdbcType=INTEGER},
      </if>
      <if test="orderStates != null">
        order_states = #{orderStates,jdbcType=INTEGER},
      </if>
      <if test="test1 != null">
        test1 = #{test1,jdbcType=VARCHAR},
      </if>
      <if test="test2 != null">
        test2 = #{test2,jdbcType=VARCHAR},
      </if>
      <if test="test3 != null">
        test3 = #{test3,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hotel.core.entity.UserRoom">
    update user_room
    set user_id = #{userId,jdbcType=INTEGER},
      room_id = #{roomId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      order_number = #{orderNumber,jdbcType=VARCHAR},
      room_number = #{roomNumber,jdbcType=INTEGER},
      room_type = #{roomType,jdbcType=VARCHAR},
      room_price = #{roomPrice,jdbcType=VARCHAR},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      leave_time = #{leaveTime,jdbcType=TIMESTAMP},
      order_overdue_states = #{orderOverdueStates,jdbcType=INTEGER},
      order_states = #{orderStates,jdbcType=INTEGER},
      test1 = #{test1,jdbcType=VARCHAR},
      test2 = #{test2,jdbcType=VARCHAR},
      test3 = #{test3,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectUserRoomListByLimit" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectCounts" resultType="int">
    SELECT count(*)
    FROM user_room
  </select>
  <update id="cancel" parameterType="com.hotel.core.entity.UserRoom">
    UPDATE user_room
    <set>
      <if test="orderOverdueStates != null and orderOverdueStates != ''">
        order_overdue_states = #{orderOverdueStates,jdbcType=INTEGER}
      </if>
    </set>
    WHERE id = #{id,jdbcType=INTEGER}
  </update>
  <select id="searchUserRoom" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    <where>
      <if test="orderNumber != null and orderNumber != ''">
        AND order_number LIKE "%"#{orderNumber,jdbcType=VARCHAR}"%"
      </if>
      <if test="username != null and username != ''">
        AND username LIKE "%"#{username,jdbcType=VARCHAR}"%"
      </if>
    </where>
  </select>
  <select id="selectPaidUserRoom" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    <where>
      <if test="orderStates != null and orderStates != ''">
        order_states = #{orderStates,jdbcType=INTEGER}
      </if>
    </where>
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectUnPaidUserRoom" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    <where>
      <if test="orderStates != null and orderStates != ''">
        order_states = #{orderStates,jdbcType=INTEGER}
      </if>
    </where>
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectUserRoomListByOrderTimeSortDesc" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    ORDER BY order_time DESC
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectUserRoomListByOrderTimeSortAsc" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    ORDER BY order_time ASC
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectUserRoomListByLeaveTimeSortDesc" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    ORDER BY leave_time DESC
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectUserRoomListByLeaveTimeSortAsc" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    ORDER BY leave_time ASC
    LIMIT #{pages,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
  </select>
  <select id="selectUserRoomListByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    WHERE user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="selectUserRoomListByUserIdAndTime" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    ORDER BY order_time ASC
  </select>
  <select id="selectUserRoomListByTime" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    ORDER BY order_time ASC
  </select>
  <select id="selectUserPriceByDay" resultType="map">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m-%d') AS order_time,SUM(room_price) AS price
    FROM user_room
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectUserPriceByMonth" resultType="map">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m') AS order_time,SUM(room_price) AS price
    FROM user_room
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY MONTH(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectUserPriceByYear" resultType="map">
    SELECT
    DATE_FORMAT(order_time,'%Y') AS order_time,SUM(room_price) AS price
    FROM user_room
    WHERE user_id = #{userId,jdbcType=INTEGER} AND order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY YEAR(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectCountsByDay" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m-%d') AS order_time,COUNT(id) AS counts
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectPriceByDay" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m-%d') AS order_time,SUM(room_price) AS price
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY DAY(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectCountsByMonth" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m') AS order_time,COUNT(id) AS counts
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY MONTH(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectPriceByMonth" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y-%m') AS order_time,SUM(room_price) AS price
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY MONTH(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectCountsByYear" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y') AS order_time,COUNT(id) AS counts
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY YEAR(order_time)
    ORDER BY order_time ASC
  </select>
  <select id="selectPriceByYear" resultType="map" parameterType="java.util.Date">
    SELECT
    DATE_FORMAT(order_time,'%Y') AS order_time,SUM(room_price) AS price
    FROM user_room
    WHERE order_time BETWEEN #{start,jdbcType=DATE} AND #{end,jdbcType=DATE}
    GROUP BY YEAR(order_time)
    ORDER BY order_time ASC
  </select>
  <delete id="deleteBatch" parameterType="java.util.List">
    DELETE FROM user_room
    WHERE id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>
</mapper>